// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["fullTextSearch", "driverAdapters"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  slug          String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  profile Profile?

  posts          Post[] @relation("PostToAuthor")
  upVotedPosts   Post[] @relation("PostToUserUpVoted")
  downVotedPosts Post[] @relation("PostToUserDownVoted")

  bookmarkedPosts Post[] @relation("PostToUserBookmarked")

  subscribedCommunities Community[] @relation("MemberToCommunity")
  ownedCommunities      Community[] @relation("OwnerToCommunity")

  comments        Comment[] @relation("CommentToAuthor")
  commentsReplies Comment[] @relation("ReplyToComment")
  upVotedComments Comment[] @relation("CommentToUserUpVoted")

  notifiedNotifications  Notification[] @relation("NotificationToUser")
  generatedNotifications Notification[] @relation("GeneratedByToUser")
  reportTo               Report[]       @relation("reportUser")
  reportBy               Report[]       @relation("reportedUser")
}

// account model for provider login
// ex - google, github
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String   @unique
  expiresAt DateTime

  @@unique([email, code])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

enum PostType {
  question
  answer
  article
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      PostType
  author    User?    @relation("PostToAuthor", fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upVotes   User[]   @relation("PostToUserUpVoted")
  downVotes User[]   @relation("PostToUserDownVoted")
  views     Int      @default(0)

  bookmarks User[] @relation("PostToUserBookmarked")

  parent   Post?   @relation("PostToPost", fields: [parentId], references: [id])
  parentId String?
  children Post[]  @relation("PostToPost")

  comments Comment[]

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?

  notifications Notification[]
  report        Report[]

  @@index([id])
  @@index([title, content])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User?    @relation("CommentToAuthor", fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  upVotes   User[]   @relation("CommentToUserUpVoted")

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  children Comment[] @relation("CommentToComment")
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId String?

  repliesTo   User?   @relation("ReplyToComment", fields: [repliesToId], references: [id])
  repliesToId String?

  notifications Notification[]
  report        Report[]
}

model Profile {
  id        String   @id @default(cuid())
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Community {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  image       String?
  owner       User?   @relation("OwnerToCommunity", fields: [ownerId], references: [id])
  ownerId     String?
  description String
  isPublic    Boolean
  posts       Post[]
  members     User[]  @relation("MemberToCommunity")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  report    Report[]
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  redirectTo String

  notifiedUser   User   @relation("NotificationToUser", fields: [notifiedUserId], references: [id], onDelete: Cascade)
  notifiedUserId String

  generatedBy   User   @relation("GeneratedByToUser", fields: [generatedById], references: [id], onDelete: Cascade)
  generatedById String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@unique([notifiedUserId, postId, generatedById])
}

enum NotificationType {
  answer
  commentPost
  commentReply
}

model Report {
  id          String   @id @default(cuid())
  reason      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String

  reportedBy   User   @relation(name: "reportUser", fields: [reportedById], references: [id])
  reportedById String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  community     Community? @relation(fields: [communitySlug], references: [slug])
  communitySlug String?

  reportedUser   User?   @relation(name: "reportedUser", fields: [reportedUserId], references: [id])
  reportedUserId String?
}
