// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String      @unique
  slug          String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  profile       Profile?
  posts         Post[]
  comments      Comment[]
  communities   Community[]
}

// account model for provider login
// ex - google, github
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String   @unique
  expiresAt DateTime

  @@unique([email, code])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Post {
  id        String   @id @default(cuid())
  key       String   @unique
  title     String?
  content   String
  preview   String?
  type      PostType
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Int      @default(0)
  views     Int      @default(0)
  bookmarks Int      @default(0)

  questionId  String?
  question    Post?      @relation("QuestionToAnswer", fields: [questionId], references: [id])
  answers     Post[]     @relation("QuestionToAnswer")
  comments    Comment[]
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User    @relation(fields: [authorId], references: [id])
  authorId String
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String?

  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId String?
  children Comment[] @relation("CommentToComment")
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Community {
  id          String @id @default(cuid())
  name        String @unique
  description String
  posts       Post[]
  members     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostType {
  QUESTION
  ANSWER
  ARTICLE
}
